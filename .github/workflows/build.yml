name: "Create Release on Tag Push"

on:
  push:
    tags:
      - "*.*.*"
  workflow_dispatch:

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "macos-13"
            target: "x86_64-apple-darwin"
          - platform: "macos-latest"
            target: "aarch64-apple-darwin"
          - platform: "windows-latest"
            target: "x86_64-pc-windows-msvc"
          - platform: "ubuntu-22.04"
            target: "x86_64-unknown-linux-gnu"

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: install dependencies (ubuntu only)
        if: runner.os == 'Linux' #
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: install frontend dependencies
        run: yarn install --frozen-lockfile

      - name: Build Frontend
        run: yarn build:frontend

      - name: Build Server Source
        run: yarn build:server

      - name: Package Sidecar for Target
        run: yarn package:server ${{ matrix.target }}

      - name: Build Tauri App
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          tagName: __VERSION__
          releaseName: "__VERSION__"
          releaseBody: "See the assets to download this version and install."
          releaseDraft: true
          prerelease: false
          args: --target ${{ matrix.target }}
  generate-latest-json:
    name: "Generate and Upload latest.json"
    needs: publish-tauri
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Get App Version using jq
        id: get_version
        run: |
          VERSION=$(jq -r '.version' src-tauri/tauri.conf.json)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create artifact directory
        run: mkdir -p src-tauri/target/release/bundle/

      - name: Download macOS ARM DMG
        uses: dsaltares/fetch-gh-release-asset@1.1.2
        with:
          version: "tags/${{ steps.get_version.outputs.version }}"
          token: ${{ secrets.GITHUB_TOKEN }}
          regex: true
          file: "Vital\\.Proxy\\.Tester_${{ steps.get_version.outputs.version }}_aarch64\\.dmg"
          target: "src-tauri/target/release/bundle/"

      - name: Download macOS Intel DMG
        uses: dsaltares/fetch-gh-release-asset@1.1.2
        with:
          version: "tags/${{ steps.get_version.outputs.version }}"
          token: ${{ secrets.GITHUB_TOKEN }}
          regex: true
          file: "Vital\\.Proxy\\.Tester_${{ steps.get_version.outputs.version }}_x64\\.dmg"
          target: "src-tauri/target/release/bundle/"

      - name: Download macOS ARM .app.tar.gz
        uses: dsaltares/fetch-gh-release-asset@1.1.2
        with:
          version: "tags/${{ steps.get_version.outputs.version }}"
          token: ${{ secrets.GITHUB_TOKEN }}
          regex: true
          file: "Vital\\.Proxy\\.Tester_aarch64\\.app\\.tar\\.gz"
          target: "src-tauri/target/release/bundle/"

      - name: Download macOS Intel .app.tar.gz
        uses: dsaltares/fetch-gh-release-asset@1.1.2
        with:
          version: "tags/${{ steps.get_version.outputs.version }}"
          token: ${{ secrets.GITHUB_TOKEN }}
          regex: true
          file: "Vital\\.Proxy\\.Tester_x64\\.app\\.tar\\.gz"
          target: "src-tauri/target/release/bundle/"

      - name: Download Windows EXE
        uses: dsaltares/fetch-gh-release-asset@1.1.2
        with:
          version: "tags/${{ steps.get_version.outputs.version }}"
          token: ${{ secrets.GITHUB_TOKEN }}
          regex: true
          file: "Vital\\.Proxy\\.Tester_${{ steps.get_version.outputs.version }}_x64-setup\\.exe"
          target: "src-tauri/target/release/bundle/"

      - name: Download Windows MSI
        uses: dsaltares/fetch-gh-release-asset@1.1.2
        with:
          version: "tags/${{ steps.get_version.outputs.version }}"
          token: ${{ secrets.GITHUB_TOKEN }}
          regex: true
          file: "Vital\\.Proxy\\.Tester_${{ steps.get_version.outputs.version }}_x64_en-US\\.msi"
          target: "src-tauri/target/release/bundle/"

      - name: Download Linux DEB
        uses: dsaltares/fetch-gh-release-asset@1.1.2
        with:
          version: "tags/${{ steps.get_version.outputs.version }}"
          token: ${{ secrets.GITHUB_TOKEN }}
          regex: true
          file: "Vital\\.Proxy\\.Tester_${{ steps.get_version.outputs.version }}_amd64\\.deb"
          target: "src-tauri/target/release/bundle/"

      - name: Download Linux RPM
        uses: dsaltares/fetch-gh-release-asset@1.1.2
        with:
          version: "tags/${{ steps.get_version.outputs.version }}"
          token: ${{ secrets.GITHUB_TOKEN }}
          regex: true
          file: "Vital\\.Proxy\\.Tester-${{ steps.get_version.outputs.version }}-1\\.x86_64\\.rpm"
          target: "src-tauri/target/release/bundle/"

      - name: Download Linux AppImage
        uses: dsaltares/fetch-gh-release-asset@1.1.2
        with:
          version: "tags/${{ steps.get_version.outputs.version }}"
          token: ${{ secrets.GITHUB_TOKEN }}
          regex: true
          file: "Vital\\.Proxy\\.Tester_${{ steps.get_version.outputs.version }}_amd64\\.AppImage"
          target: "src-tauri/target/release/bundle/"
      - name: Download all .sig files
        uses: dsaltares/fetch-gh-release-asset@1.1.2
        with:
          version: "tags/${{ steps.get_version.outputs.version }}"
          token: ${{ secrets.GITHUB_TOKEN }}
          regex: true
          file: ".*\\.sig"
          target: "src-tauri/target/release/bundle/"

      # --- Generate latest.json ---
      - name: Generate latest.json from artifacts
        run: node scripts/gen-latest.mjs

      - name: Upload latest.json to the release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "${{ steps.get_version.outputs.version }}"
          files: latest.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
