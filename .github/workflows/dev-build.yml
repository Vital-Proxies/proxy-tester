name: "Dev Build and Publish to dev-latest"

on:
  push:
    tags:
      - "*.*.*"
    branches:
      - dev
  workflow_dispatch:

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "macos-13"
            target: "x86_64-apple-darwin"
          - platform: "macos-latest"
            target: "aarch64-apple-darwin"
          - platform: "windows-latest"
            target: "x86_64-pc-windows-msvc"
          - platform: "ubuntu-22.04"
            target: "x86_64-unknown-linux-gnu"

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: install dependencies (ubuntu only)
        if: runner.os == 'Linux' #
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: install frontend dependencies
        run: yarn install --frozen-lockfile

      - name: Build Frontend
        run: yarn build:frontend

      - name: Build Server Source
        run: yarn build:server

      - name: Package Sidecar for Target
        run: yarn package:server ${{ matrix.target }}

      - name: Get App Version
        id: get_version
        run: |
          VERSION=$(jq -r '.version' src-tauri/tauri.conf.json)
          echo "value=$VERSION" >> $GITHUB_OUTPUT

      - name: Build Tauri App (Dev)
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          tagName: dev-latest
          releaseName: "Development Build (dev-latest)"
          releaseBody: ""
          releaseDraft: false
          prerelease: true
          args: --target ${{ matrix.target }}

      - name: Rename artifacts to versionless names
        run: |
          cd src-tauri/target/release/bundle
          [ -f dmg/Vital.Proxy.Tester_${{ steps.get_version.outputs.value }}_x64.dmg ] && mv dmg/Vital.Proxy.Tester_${{ steps.get_version.outputs.value }}_x64.dmg dmg/Vital.Proxy.Tester_x64.dmg
          [ -f dmg/Vital.Proxy.Tester_${{ steps.get_version.outputs.value }}_aarch64.dmg ] && mv dmg/Vital.Proxy.Tester_${{ steps.get_version.outputs.value }}_aarch64.dmg dmg/Vital.Proxy.Tester_aarch64.dmg
          [ -f deb/Vital.Proxy.Tester_${{ steps.get_version.outputs.value }}_amd64.deb ] && mv deb/Vital.Proxy.Tester_${{ steps.get_version.outputs.value }}_amd64.deb deb/Vital.Proxy.Tester_amd64.deb
          [ -f appimage/Vital.Proxy.Tester_${{ steps.get_version.outputs.value }}_amd64.AppImage ] && mv appimage/Vital.Proxy.Tester_${{ steps.get_version.outputs.value }}_amd64.AppImage appimage/Vital.Proxy.Tester_amd64.AppImage
          [ -f msi/Vital.Proxy.Tester_${{ steps.get_version.outputs.value }}_x64_en-US.msi ] && mv msi/Vital.Proxy.Tester_${{ steps.get_version.outputs.value }}_x64_en-US.msi msi/Vital.Proxy.Tester_x64_en-US.msi
          [ -f nsis/Vital.Proxy.Tester_${{ steps.get_version.outputs.value }}_x64-setup.exe ] && mv nsis/Vital.Proxy.Tester_${{ steps.get_version.outputs.value }}_x64-setup.exe nsis/Vital.Proxy.Tester_x64-setup.exe

      - name: Upload Renamed Artifacts
        uses: softprops/action-gh-release@v1
        with:
          tag_name: dev-latest
          name: "Development Build (dev-latest)"
          prerelease: true
          files: |
            src-tauri/target/release/bundle/**/*.dmg
            src-tauri/target/release/bundle/**/*.AppImage
            src-tauri/target/release/bundle/**/*.deb
            src-tauri/target/release/bundle/**/*.rpm
            src-tauri/target/release/bundle/**/*.exe
            src-tauri/target/release/bundle/**/*.msi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
